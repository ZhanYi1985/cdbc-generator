#parse("common.vm")
#c_copyright()
/**
* @file
* all daos definition of $filename.
*
* NOTICE:
* This file is generated by tools.
* Please dont't modify this file.
* If u want to add more functions to
* daos. You can extends these classes,
* Not overwrites.
*/

#ifndef ZT_${upFileName}_DAOS_H
\#define ZT_${upFileName}_DAOS_H 1

\#include "$entityHeaderFile"
\#include <soci.h>

namespace zt {
namespace db {

#foreach ($table in $tables)
class #_dao_name($table) {
public:
	#_dao_name($table)(soci::session &_s);

	virtual ~#_dao_name($table)();

    bool insert( #_c_struct_name($table) *entity );

	size_t count();

#foreach ($index in $table.indexes)
	/**
	 * query by index $index.name.
	 * @param entity  in/out parameter.
	 * #foreach ($column in $index.columns) #if ($velocityHasNext == true) $column.name, #else $column.name #end must be set.
#end
	 * @return true. The entity will be fill with the record.
	 */
	bool query_by_$index.name ( #_c_struct_name($table) *entity );

    /**
    * update by index $index.name (#foreach ($column in $index.columns) #if ($velocityHasNext == true) $column.name, #else $column.name #end).
#end
    * @param entity  in parameter.
	* @return true.
    */
	bool update_by_$index.name ( #_c_struct_name($table) *entity );

    /**
    * delete by index $index.name.
    * @param entity  in parameter.
    * #foreach ($column in $index.columns) #if ($velocityHasNext == true) $column.name, #else $column.name #end must be set.
#end
    * @return true. The entity will be fill with the record.
    */
	bool delete_by_$index.name ( #_c_struct_name($table) *entity );
#end

protected:
	soci::session &_sql;
};
#end

}
}
#endif /* ZT_${upFileName}_DAOS_H */
